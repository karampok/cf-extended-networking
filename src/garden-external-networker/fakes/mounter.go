// This file was generated by counterfeiter
package fakes

import (
	"sync"
)

type Mounter struct {
	IdempotentlyMountStub        func(source, target string) error
	idempotentlyMountMutex       sync.RWMutex
	idempotentlyMountArgsForCall []struct {
		source string
		target string
	}
	idempotentlyMountReturns struct {
		result1 error
	}
	idempotentlyMountReturnsOnCall map[int]struct {
		result1 error
	}
	RemoveMountStub        func(target string) error
	removeMountMutex       sync.RWMutex
	removeMountArgsForCall []struct {
		target string
	}
	removeMountReturns struct {
		result1 error
	}
	removeMountReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *Mounter) IdempotentlyMount(source string, target string) error {
	fake.idempotentlyMountMutex.Lock()
	ret, specificReturn := fake.idempotentlyMountReturnsOnCall[len(fake.idempotentlyMountArgsForCall)]
	fake.idempotentlyMountArgsForCall = append(fake.idempotentlyMountArgsForCall, struct {
		source string
		target string
	}{source, target})
	fake.recordInvocation("IdempotentlyMount", []interface{}{source, target})
	fake.idempotentlyMountMutex.Unlock()
	if fake.IdempotentlyMountStub != nil {
		return fake.IdempotentlyMountStub(source, target)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.idempotentlyMountReturns.result1
}

func (fake *Mounter) IdempotentlyMountCallCount() int {
	fake.idempotentlyMountMutex.RLock()
	defer fake.idempotentlyMountMutex.RUnlock()
	return len(fake.idempotentlyMountArgsForCall)
}

func (fake *Mounter) IdempotentlyMountArgsForCall(i int) (string, string) {
	fake.idempotentlyMountMutex.RLock()
	defer fake.idempotentlyMountMutex.RUnlock()
	return fake.idempotentlyMountArgsForCall[i].source, fake.idempotentlyMountArgsForCall[i].target
}

func (fake *Mounter) IdempotentlyMountReturns(result1 error) {
	fake.IdempotentlyMountStub = nil
	fake.idempotentlyMountReturns = struct {
		result1 error
	}{result1}
}

func (fake *Mounter) IdempotentlyMountReturnsOnCall(i int, result1 error) {
	fake.IdempotentlyMountStub = nil
	if fake.idempotentlyMountReturnsOnCall == nil {
		fake.idempotentlyMountReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.idempotentlyMountReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *Mounter) RemoveMount(target string) error {
	fake.removeMountMutex.Lock()
	ret, specificReturn := fake.removeMountReturnsOnCall[len(fake.removeMountArgsForCall)]
	fake.removeMountArgsForCall = append(fake.removeMountArgsForCall, struct {
		target string
	}{target})
	fake.recordInvocation("RemoveMount", []interface{}{target})
	fake.removeMountMutex.Unlock()
	if fake.RemoveMountStub != nil {
		return fake.RemoveMountStub(target)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.removeMountReturns.result1
}

func (fake *Mounter) RemoveMountCallCount() int {
	fake.removeMountMutex.RLock()
	defer fake.removeMountMutex.RUnlock()
	return len(fake.removeMountArgsForCall)
}

func (fake *Mounter) RemoveMountArgsForCall(i int) string {
	fake.removeMountMutex.RLock()
	defer fake.removeMountMutex.RUnlock()
	return fake.removeMountArgsForCall[i].target
}

func (fake *Mounter) RemoveMountReturns(result1 error) {
	fake.RemoveMountStub = nil
	fake.removeMountReturns = struct {
		result1 error
	}{result1}
}

func (fake *Mounter) RemoveMountReturnsOnCall(i int, result1 error) {
	fake.RemoveMountStub = nil
	if fake.removeMountReturnsOnCall == nil {
		fake.removeMountReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.removeMountReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *Mounter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.idempotentlyMountMutex.RLock()
	defer fake.idempotentlyMountMutex.RUnlock()
	fake.removeMountMutex.RLock()
	defer fake.removeMountMutex.RUnlock()
	return fake.invocations
}

func (fake *Mounter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
